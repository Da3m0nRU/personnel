File directory: config.py, and it contains following code: 
# config.py
import os
from dotenv import load_dotenv
from pathlib import Path

load_dotenv()  # загрузили .env

BASE_DIR = Path(__file__).parent  # Путь к папке, где config
ASSETS_PATH = BASE_DIR / "assets" / "img"  # относительно config

# Берем из .env, если есть, иначе default
DATABASE_PATH = os.getenv("DATABASE_PATH", "kadry.db")
DEFAULT_USERNAME = os.getenv("DEFAULT_USERNAME", "Пользователь")
DEFAULT_USER_ROLE = os.getenv("DEFAULT_USER_ROLE", "Сотрудник")

# Цвета
MAIN_BG_COLOR = "#F0F4F8"
LEFT_PANEL_BG_COLOR = "#FFFFFF"
BUTTON_BG_COLOR = "#FFFFFF"
BUTTON_ACTIVE_BG_COLOR = "#00B275"
BUTTON_HOVER_COLOR = "#EEEEEE"
BUTTON_TEXT_COLOR = "#333333"
BUTTON_ACTIVE_TEXT_COLOR = "#FFFFFF"
BUTTON_DISABLED_TEXT_COLOR = "#969BA0"  # Для disabled кнопок (если будут)
LABEL_TEXT_COLOR = "#464154"
FOOTER_TEXT_COLOR = "#969BA0"
ACCENT_COLOR = "#00B074"  # Зеленый, для акцентов (прямоугольник и т.д.)

# Размеры
LEFT_PANEL_WIDTH = 344
WINDOW_WIDTH = 1247
WINDOW_HEIGHT = 1022
BUTTON_WIDTH = 250
BUTTON_HEIGHT = 54
BUTTON_X = 62
BUTTON_Y_START = 180
BUTTON_Y_SPACING = 15
AVATAR_SIZE = (48, 48)

# Шрифты. Можно оставить так, можно задать в .env
DEFAULT_FONT = ("Arial", 18)
BOLD_FONT = ("Arial", 18, "bold")
TITLE_BOLD_FONT = ("Arial", 42, "bold")
FOOTER_FONT = ("Arial", 12)

# Пути. Если нужно вынести пути к иконкам
# ASSETS_PATH перенесено в utils


File directory: main.py, and it contains following code: 
# main.py
import tkinter as tk
import customtkinter as ctk
from gui.main_window import MainWindow
from db.database import Database


def main():
    # ctk.set_appearance_mode("light")  # Перенес в main_window.py
    # ctk.set_default_color_theme("green")

    db = Database()
    if db.conn is None:  # Если не удалось подключиться к базе данных
        return  # ... завершаем работу

    root = ctk.CTk()
    app = MainWindow(root, db)  # !!! Передаем объект базы данных в MainWindow
    root.mainloop()

    db.close()  # Закрываем соединение с базой данных при закрытии приложения


if __name__ == "__main__":
    main()


File directory: main1.py, and it contains following code: 
import os


def merge_cs_files(folder_path, output_file):
    with open(output_file, 'w', encoding='utf-8') as out_f:  # Specify encoding here
        for root, dirs, files in os.walk(folder_path):
            for file_name in files:
                if file_name.endswith('.py'):
                    file_path = os.path.join(root, file_name)
                    # Получаем относительный путь к файлу относительно folder_path
                    relative_path = os.path.relpath(file_path, folder_path)
                    # Удаляем дублирующуюся часть пути, если она есть
                    relative_path = relative_path.replace(
                        relative_path.split(os.sep)[0] + os.sep, '', 1)
                    with open(file_path, 'r', encoding='utf-8') as in_f:  # Specify encoding here
                        # Записываем относительный путь и название файла
                        out_f.write(
                            f"File directory: {relative_path}, and it contains following code: \n")
                        out_f.write(in_f.read())
                        out_f.write("\n\n")


# Укажите путь к папке, содержащей .cs файлы, и имя выходного файла
folder_path = "G:/вуз мгимо/3 курс/Программный Проект/Project"
output_file = "output.txt"

merge_cs_files(folder_path, output_file)


File directory: database.py, and it contains following code: 
# db/database.py
import sqlite3
# !!!  Используем config
from config import DATABASE_PATH


class Database:
    def __init__(self, db_path=DATABASE_PATH):  # указываем по умолчанию
        self.conn = None  # Инициализируем, чтобы IDE не ругалась
        self.cursor = None
        try:
            self.conn = sqlite3.connect(db_path)
            self.cursor = self.conn.cursor()
        except sqlite3.Error as e:
            # Или messagebox из tkinter
            print(f"Database connection error: {e}")
            # В реальном приложении здесь нужно предпринять действия

    def execute_query(self, query, params=None):
        try:
            if params:
                self.cursor.execute(query, params)
            else:
                self.cursor.execute(query)
            self.conn.commit()
            return True  # !!!
        except sqlite3.Error as e:
            # Подробный вывод
            print(f"SQL error: {e}, query: {query}, params: {params}")
            self.conn.rollback()
            return False

    def fetch_all(self, query, params=None):
        try:
            if params:
                self.cursor.execute(query, params)
            else:
                self.cursor.execute(query)
            return self.cursor.fetchall()  # !!!
        except sqlite3.Error as e:
            print(f"SQL error: {e}, query: {query}, params: {params}")
            return None

    def fetch_one(self, query, params=None):
        try:
            if params:
                self.cursor.execute(query, params)
            else:
                self.cursor.execute(query)
            return self.cursor.fetchone()  # !!!
        except sqlite3.Error as e:
            print(f"SQL error: {e}, query: {query}, params: {params}")
            return None

    def close(self):
        if self.conn:
            self.conn.close()


File directory: main_window.py, and it contains following code: 
import customtkinter as ctk
from tkinter import Label, PhotoImage
from PIL import Image, ImageTk
from .utils import load_icon, relative_to_assets
from config import *
import random
import threading
import time
import colorsys  # !!!  Добавляем импорт


class MainWindow(ctk.CTkFrame):
    def __init__(self, master, db):
        super().__init__(master)
        self.master = master
        self.db = db
        self.master.geometry(f"{WINDOW_WIDTH}x{WINDOW_HEIGHT}")
        self.master.title("АИС Кадры")
        self.master.resizable(False, False)
        self.configure(fg_color=MAIN_BG_COLOR)  # !!!

        #  Шрифты
        self.default_font = ctk.CTkFont(family="Poppins", size=18)  # !!!
        self.bold_font = ctk.CTkFont(
            family="Poppins", size=18, weight="bold")  # !!!
        self.title_bold_font = ctk.CTkFont(
            family="Poppins", size=42, weight="bold")
        self.rgb_mode = False  # Флаг RGB-режима
        self.rgb_thread = None  # Поток
        self.create_widgets()

    def create_widgets(self):
        # --- Левая панель (белая) ---
        self.left_frame = ctk.CTkFrame(
            self.master, fg_color=LEFT_PANEL_BG_COLOR, width=LEFT_PANEL_WIDTH, height=WINDOW_HEIGHT)
        self.left_frame.pack_propagate(False)
        self.left_frame.pack(side="left", fill="y")

        # "Кадры"
        self.title_label = ctk.CTkLabel(
            self.left_frame,
            text="Кадры",
            font=self.title_bold_font,
            text_color="#333333",
            anchor="nw",
            padx=62,
            pady=40,
        )
        self.title_label.pack()

        # Иконка
        image_image_2 = Image.open(relative_to_assets("image_2.png"))
        image_photo_2 = ImageTk.PhotoImage(image_image_2)
        self.image_label_2 = ctk.CTkLabel(
            self.left_frame, image=image_photo_2, text="", bg_color="white")  # !!!  text=""
        self.image_label_2.image = image_photo_2
        self.image_label_2.place(x=28, y=40)

        # Подпись
        self.subtitle_label = ctk.CTkLabel(
            self.left_frame,
            text="Автоматизированная Система\nУправления Кадрами",
            font=("Arial", 14),
            text_color="#B9BABD",
            anchor="nw",
            padx=62,
            pady=0,
        )
        self.subtitle_label.pack()

        # --- Кнопки меню (CustomTkinter) ---
        self.buttons = []
        self.active_rectangle_label = None

        self.button_width = 250
        self.button_height = 54
        self.button_x = 62
        self.button_y_start = 180
        self.button_y_spacing = 15

        button_configs = [
            ("Главная", "home.png", self.show_dashboard),
            ("Сотрудники", "users.png", self.show_employees),
            ("Кадровые события", "edit.png", self.show_events),
            ("Отсутствия", "list.png", self.show_absences),
            ("Отчеты", "chart-histogram.png", self.show_reports),
            ("Пользователи", "user.png", self.show_users),
        ]

        for i, (text, icon_name, command) in enumerate(button_configs):
            button = ctk.CTkButton(
                master=self.left_frame,
                text=text,
                corner_radius=15,
                command=lambda i=i: self.button_click(i),
                fg_color=BUTTON_BG_COLOR,
                bg_color=BUTTON_BG_COLOR,
                hover_color=BUTTON_HOVER_COLOR,
                text_color=BUTTON_TEXT_COLOR,
                width=self.button_width,
                height=self.button_height,
                font=self.default_font,
                image=load_icon(icon_name),
                anchor="w"
            )
            button.place(x=self.button_x, y=self.button_y_start +
                         i * (self.button_height + self.button_y_spacing))
            self.buttons.append(button)

        # --- Информация о пользователе (над футером) ---

        #  Создаем фрейм-контейнер
        self.user_info_frame = ctk.CTkFrame(
            self.left_frame, fg_color="transparent")
        self.user_info_frame.place(x=20, y=850)  # Размещаем сам фрейм

        #  Изображение (Pillow)
        avatar_image = Image.open(relative_to_assets("image_1.png"))
        self.avatar_photo = ctk.CTkImage(avatar_image, size=(48, 48))  # !!!
        self.avatar_label = ctk.CTkLabel(  # !!! CTkLabel
            self.user_info_frame,
            image=self.avatar_photo,
            text="",  # !!!
        )
        self.avatar_label.image = self.avatar_photo
        # !!! pack, выравниваем по левому краю
        self.avatar_label.pack(side="left", padx=(0, 10))

        self.name_role_frame = ctk.CTkFrame(
            self.user_info_frame, fg_color="transparent")  # Создаём фрейм
        self.name_role_frame.pack(side="right")  # Размещаем справа

        self.user_name_label = ctk.CTkLabel(
            self.name_role_frame,  # мастер
            text=DEFAULT_USERNAME,
            text_color=LABEL_TEXT_COLOR,
            font=("Arial", 16),
            anchor="nw",
        )
        self.user_name_label.pack(anchor="nw")  # !!!
        self.user_access_label = ctk.CTkLabel(
            self.name_role_frame,  # мастер
            text=DEFAULT_USER_ROLE,
            text_color=ACCENT_COLOR,
            font=("Arial", 16),
            anchor="nw"
        )
        self.user_access_label.pack(anchor="nw")  # !!!

        # --- Футер ---

        footer_text1 = ctk.CTkLabel(
            self.left_frame, text="Made by Victor", text_color=FOOTER_TEXT_COLOR, font=("Arial", 14))
        footer_text1.place(x=20, y=984)

        footer_text2 = ctk.CTkLabel(
            self.left_frame, text="АСУ “Кадры”\n© 2025 Все права защищены", text_color=FOOTER_TEXT_COLOR, font=("Arial", 12)
        )
        footer_text2.place(x=150, y=984)

        # --- Рамка контента ---
        self.content_frame = ctk.CTkFrame(
            self.master, fg_color=MAIN_BG_COLOR, width=WINDOW_WIDTH - LEFT_PANEL_WIDTH, height=WINDOW_HEIGHT)
        self.content_frame.pack_propagate(False)
        self.content_frame.pack(side="right", fill="both", expand=True)

        # --- Чекбокс RGB-режима ---
        self.rgb_checkbox = ctk.CTkCheckBox(
            self.left_frame,
            text="RGB Режим",
            command=self.toggle_rgb_mode,
            onvalue=True,
            offvalue=False,
            checkbox_width=18,  # !!!  Размеры
            checkbox_height=18
        )
        self.rgb_checkbox.place(x=20, y=800)

        self.button_click(0)

    def start_rgb(self):  # запуск
        self.rgb_thread = threading.Thread(target=self.rgb_mode_loop)
        self.rgb_thread.daemon = True  # Чтобы поток завершился при закрытии
        self.rgb_thread.start()

    def button_click(self, button_number):
        if self.active_rectangle_label:
            self.active_rectangle_label.destroy()

        for i, button in enumerate(self.buttons):
            button.configure(fg_color=BUTTON_BG_COLOR,
                             text_color=BUTTON_TEXT_COLOR, hover_color=BUTTON_HOVER_COLOR)

        self.buttons[button_number].configure(
            fg_color=BUTTON_ACTIVE_BG_COLOR, text_color=BUTTON_ACTIVE_TEXT_COLOR, hover_color=BUTTON_ACTIVE_BG_COLOR
        )

        self.active_rectangle_label = ctk.CTkLabel(
            self.left_frame,
            text="",
            fg_color=ACCENT_COLOR,
            bg_color=ACCENT_COLOR,
            width=8,
            height=54
        )

        self.active_rectangle_label.place(
            x=0,
            y=180.0 + button_number * (54 + 15)
        )

    def toggle_rgb_mode(self):
        self.rgb_mode = not self.rgb_mode
        if self.rgb_mode:
            self.start_rgb()  # запускаем, если врубили
        else:
            # Возвращаем обычные цвета
            self.title_label.configure(text_color="#333333")
            self.user_access_label.configure(text_color=ACCENT_COLOR)

    def rgb_mode_loop(self):
        hue = 0  # Начинаем с красного (hue = 0)
        while self.rgb_mode:
            #  Конвертируем HSV в RGB (значения от 0.0 до 1.0)
            r, g, b = colorsys.hsv_to_rgb(hue / 360.0, 1.0, 1.0)
            #  Переводим RGB в шестнадцатеричный формат (#RRGGBB)
            hex_color = "#{:02x}{:02x}{:02x}".format(
                int(r * 255), int(g * 255), int(b * 255))

            self.title_label.configure(text_color=hex_color)
            self.user_access_label.configure(text_color=hex_color)

            hue += 5  # Увеличиваем тон (скорость изменения цвета)
            if hue > 360:
                hue = 0  # Сбрасываем, чтобы начать сначала

            time.sleep(0.05)  # Задержка (скорость переливания)

     # Заглушки

    def show_dashboard(self):
        print("Show Dashboard")

    def show_employees(self):
        print("Show Employees")

    def show_events(self):
        print("Show Events")

    def show_absences(self):
        print("Show Absences")

    def show_reports(self):
        print("Show Reports")

    def show_users(self):
        print("Показать юзеров")


File directory: utils.py, and it contains following code: 
# gui/utils.py
from pathlib import Path
from PIL import Image
import customtkinter as ctk
from config import ASSETS_PATH  # берём из config

# from config import ASSETS_PATH  # !!!  Используем из config

# !!!  Больше не нужно
# _ASSETS_PATH = Path(__file__).parent.parent.resolve() / "assets/frame0"


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def load_icon(name: str, size=(24, 24)):
    img = Image.open(relative_to_assets(name))
    return ctk.CTkImage(img, size=size)


